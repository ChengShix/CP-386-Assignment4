#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <sys/stat.h>
#include <ctype.h>

#define MAX(X, Y) ((X)>(Y) ? (X) : (Y))


typedef struct bank {
    int** max;
    int** alloc;
    int** need;
    int types;
    int customers;
    int avail[];
} Bank;

int readFile(const char *fileName,Bank **bank);
int requestResource(int Customer, int resource[], Bank *bank);
int releaseResource(int Customer, int resource[], Bank *bank);
void threadRun();
int * safe(Bank *bank);

int main(int argc, char const *argv[]) {
    if (argc < 2) {
        printf("Input args missing\n");
        return -1;
    }

    const char fileName[] = "sample4_in.txt";
    Bank *bank = malloc(sizeof(Bank));
    int customer_n = readFile(fileName, &bank);
    bank->types = argc-1;
    bank->customers = customer_n;
    for (int i=0; i<argc-1; i++) {
        bank->avail[i] = atoi(argv[i+1]);
    }
    printf("Number of Customers: %d\n", customer_n);
    printf("Currently Available resources:");
    for (int i=0; i<bank->types; i++) {
        printf("%d ", bank->avail[i]);
    }printf("\n");
    printf("Maximum resources from file: \n");
    for (int i=0; i<customer_n;i++){
        printf("%d,%d,%d,%d\n", bank->max[i][0], bank->max[i][1], bank->max[i][2], bank->max[i][3]);
    }

    while (1){
        char buffer[50],buffer2[50];
        char a,b;
        printf("Enter Command: ");
        fgets(buffer,50,stdin);
		if (sscanf(buffer,"%c%c%[^\r\n]", &a, &b, buffer2)) {
			char *token;
			int r[bank->types];
			int c;
			int x=0;
			token = strtok(buffer2," ");
			while (token!=NULL) {
				if (x == 0) {
					c = atoi(token);
				}
				r[x-1] = atoi(token);
				x++;
				token = strtok(NULL, " ");
			}
			if (isalpha(a) && isalpha(b)) {
				if (a == 'R') {
					if (b == 'Q') {
						int k = requestResource(c,r,bank);
						if (k == 0) {
							printf("State is safe, and Request is satisfied\n");
						}else{
							printf("Request deny\n");
						}
					}else if (b == 'L') {
						printf("Released\n");
						releaseResource(c,r,bank);
					}else if (b == 'u' && buffer2[0] == 'n') {
						int * seq = safe(bank);
						if (seq == NULL) {
							printf("Not safe\n");
						}else{
							printf("Safe Sequence is: <");
							for (int i = 0; i< bank->customers; i++) {
								printf("%d ", seq[i]);
							}
							printf("\b>\n");
							for (int i = 0; i< bank->customers; i++) {
								threadRun(bank,seq[i]);
							}
						}
					}
				}else if (a== 'S' && b == 't' && buffer2[0] == 'a' && buffer2[1] == 't' && buffer2[2] == 'u' && buffer2[3] == 's') {
					printf("Available:\n");
					for (int i=0; i<bank->types;i++) {
						printf("%d ", bank->avail[i]);
					}
					printf("\nMax:\n");
					for (int i=0; i<customer_n;i++) {
						printf("Customer:%d ", i);
						for (int j=0; j<bank->types;j++) {
							printf("%d ", bank->max[i][j]);
						} printf("\n");
					}
					printf("\nAllocation:\n");
					for (int i=0; i<customer_n;i++) {
						printf("Customer:%d ", i);
						for (int j=0; j<bank->types;j++) {
							printf("%d ", bank->alloc[i][j]);
						} printf("\n");
					}
					printf("\nNeed:\n");
					for (int i=0; i<customer_n;i++) {
						printf("Customer:%d ", i);
						for (int j=0; j<bank->types;j++) {
							printf("%d ", bank->need[i][j]);
						} printf("\n");
					}
				}else if (a == 'E' && b == 'x' && buffer2[0] == 'i' && buffer2[0] == 't'){
					return 0;
				}else{
					printf("Invalid input\n");
				}
			}
        }
    }

    return 0;
}
void threadRun(Bank *bank, int customer){
    printf("--> Customer/Thread %d\n", customer);
    printf("      Allocated resources: ");
    int i;
    for (i=0; i<bank->types; i++) {
        printf("%d ", bank->alloc[customer][i]);
    }
    printf("\n      Needed: ");
    for (i=0; i<bank->types; i++) {
        printf("%d ", bank->need[customer][i]);
    }
    printf("\n      Available: ");
    for (i=0; i<bank->types; i++) {
        printf("%d ", bank->avail[i]);
    }
    printf("\n      Thread has started\n");

    for (i = 0; i<bank->types; i++) {
        bank->need[customer][i] = MAX(0,bank->need[customer][i]-bank->avail[i]);
        bank->avail[i] += bank->alloc[customer][i];
        bank->alloc[customer][i] = 0;
    }

    printf("      Thread has finished and resources had released\n");
    printf("      New Available: ");
    for (i=0; i<bank->types; i++) {
        printf("%d ", bank->avail[i]);
    }
    printf("\n");
}


int checkLessVetor(int *a, int *b, int len){
    for (int i=0;i<len;i++) {
        if (a[i]>b[i]) {
            return -1;
        }
    }
    return 0;
}

int * safe(Bank *bank) {
    int work[bank->types];
    int finish[bank->customers];
    int *seq = malloc(bank->customers);
    int o=0;
    for (int i=0; i<bank->types; i++) {
        work[i] = bank->avail[i];
    }
    for (int i=0; i<bank->customers; i++) {
        finish[i] = 1;
    }
    for (int i=0; i<bank->customers; i++) {
            if (finish[i] == 1 && checkLessVetor(bank->need[i],work,bank->types) == 0) {
	    	for (int j=0; j>bank->types; j++){
                	work[j] += bank->alloc[i][j];
		}
                	finish[i] = 0;
                	seq[o++] = i;
                	i = -1;
            }
    }
    for (int i=0; i<bank->customers; i++) {
        if (finish[i] == 1) {
            return NULL;
        }
    }
    return seq;
}

int requestResource(int Customer, int request[], Bank *bank) {
    for (int i=0; i<bank->types; i++) {
        if (request[i] > bank->need[Customer][i]) {
            return -1;
        }else if (request[i] > bank->avail[i]) {
            return -1;
        }
    }
    for (int i=0; i<bank->types; i++) {
        bank->avail[i] -= request[i];
        bank->alloc[Customer][i] += request[i];
        bank->need[Customer][i] -= request[i];
    }
    if (safe(bank) == NULL) {
        for (int i=0; i<bank->types; i++) {
            bank->avail[i] += request[i];
            bank->alloc[Customer][i] -= request[i];
            bank->need[Customer][i] += request[i];
        }
        return -1;
    }
    return 0;
}

int releaseResource(int Customer, int resource[], Bank *bank) {
    for (int i=0; i < bank->types; i++) {
        bank->alloc[Customer][i] = MAX(0,bank->alloc[Customer][i] - resource[i]);
    }
    return 0;
}

int readFile(const char *fileName, Bank **bank) {
    FILE *in = fopen(fileName, "r");
    if (!in){
        printf("Error in opening file\n");
        return -1;
    }

    struct stat st;
	fstat(fileno(in), &st);
	char *fileContent = (char*) malloc(((int) st.st_size + 1) * sizeof(char));
	fileContent[0] = '\0';
	while (!feof(in)) {
		char line[100];
		if (fgets(line, 100, in) != NULL) {
			strncat(fileContent, line, strlen(line));
		}
	}
	fclose(in);

    char *command = NULL;
	int customerCount = 0;
	char *fileCopy = (char*) malloc((strlen(fileContent) + 1) * sizeof(char));
	strcpy(fileCopy, fileContent);
	command = strtok(fileCopy, "\r\n");
	while (command != NULL) {
		customerCount++;
		command = strtok(NULL, "\r\n");
	}
	(*bank)->max = calloc(customerCount,sizeof(int *));
    (*bank)->alloc = calloc(customerCount,sizeof(int *));
    (*bank)->need = calloc(customerCount,sizeof(int *));
    for (int i=0; i<customerCount; i++) {
        (*bank)->max[i] = calloc((*bank)->types,sizeof(int));
        (*bank)->alloc[i] = calloc((*bank)->types,sizeof(int));
        (*bank)->need[i] = calloc((*bank)->types,sizeof(int));
    }

    char *lines[customerCount];
	command = NULL;
	int i = 0;
	command = strtok(fileContent, "\r\n");
	while (command != NULL) {
		lines[i] = malloc(sizeof(command) * sizeof(char));
		strcpy(lines[i], command);
		i++;
		command = strtok(NULL, "\r\n");
	}

    for (int k = 0; k < customerCount; k++) {
		char *token = NULL;
		int j = 0;
		token = strtok(lines[k], ",");
		while (token != NULL) {
			(*bank)->max[k][j] = atoi(token);
	    (*bank)->need[k][j] = atoi(token);
            j++;
			token = strtok(NULL, ",");
		}
	}
	return customerCount;
}
